"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[40899],{46206:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>x,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var l=i(85893),s=i(11151),c=i(74866),r=i(85162),t=i(3901);const a={toc_max_heading_level:4},o="Platformatic CLI",d={id:"reference/cli",title:"Platformatic CLI",description:"Installation and usage",source:"@site/versioned_docs/version-1.23.0/reference/cli.md",sourceDirName:"reference",slug:"/reference/cli",permalink:"/docs/reference/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.23.0/reference/cli.md",tags:[],version:"1.23.0",frontMatter:{toc_max_heading_level:4},sidebar:"docs",previous:{title:"Reference",permalink:"/docs/category/reference"},next:{title:"Platformatic Composer",permalink:"/docs/reference/composer/introduction"}},h={},p=[{value:"Installation and usage",id:"installation-and-usage",level:2},{value:"Commands",id:"commands",level:2},{value:"help",id:"help",level:3},{value:"compile",id:"compile",level:4},{value:"deploy",id:"deploy",level:4},{value:"gh",id:"gh",level:4},{value:"login",id:"login",level:4},{value:"start",id:"start",level:4},{value:"upgrade",id:"upgrade",level:4},{value:"client",id:"client",level:3},{value:"help",id:"help-1",level:4},{value:"composer",id:"composer",level:3},{value:"create",id:"create",level:4},{value:"help",id:"help-2",level:4},{value:"openapi schemas fetch",id:"openapi-schemas-fetch",level:4},{value:"start",id:"start-1",level:4},{value:"db",id:"db",level:3},{value:"compile",id:"compile-1",level:4},{value:"create",id:"create-1",level:4},{value:"help",id:"help-3",level:4},{value:"migrations apply",id:"migrations-apply",level:4},{value:"migrations create",id:"migrations-create",level:4},{value:"migrations",id:"migrations",level:4},{value:"schema",id:"schema",level:4},{value:"seed",id:"seed",level:4},{value:"start",id:"start-2",level:4},{value:"types",id:"types",level:4},{value:"service",id:"service",level:3},{value:"compile",id:"compile-2",level:4},{value:"create",id:"create-2",level:4},{value:"help",id:"help-4",level:4},{value:"schema",id:"schema-1",level:4},{value:"start",id:"start-3",level:4},{value:"versions bump",id:"versions-bump",level:4},{value:"versions update",id:"versions-update",level:4},{value:"frontend",id:"frontend",level:3},{value:"runtime",id:"runtime",level:3},{value:"compile",id:"compile-3",level:4},{value:"help",id:"help-5",level:4},{value:"start",id:"start-4",level:4},{value:"start",id:"start-5",level:3}];function j(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"platformatic-cli",children:"Platformatic CLI"}),"\n",(0,l.jsx)(n.h2,{id:"installation-and-usage",children:"Installation and usage"}),"\n",(0,l.jsx)(n.p,{children:"Install the Platformatic CLI as a dependency for your project:"}),"\n",(0,l.jsxs)(c.Z,{groupId:"package-manager",children:[(0,l.jsx)(r.Z,{value:"npm",label:"npm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install platformatic\n"})})}),(0,l.jsx)(r.Z,{value:"yarn",label:"Yarn",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"yarn add platformatic\n"})})}),(0,l.jsx)(r.Z,{value:"pnpm",label:"pnpm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pnpm add platformatic\n"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Once it's installed you can run it with:"}),"\n",(0,l.jsxs)(c.Z,{groupId:"package-manager",children:[(0,l.jsx)(r.Z,{value:"npm",label:"npm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic\n"})})}),(0,l.jsx)(r.Z,{value:"yarn",label:"Yarn",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"yarn platformatic\n"})})}),(0,l.jsx)(r.Z,{value:"pnpm",label:"pnpm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pnpm platformatic\n"})})})]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"platformatic"})," package can be installed globally, but installing it as a\nproject dependency ensures that everyone working on the project is using the\nsame version of the Platformatic CLI."]})}),"\n",(0,l.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,l.jsx)(n.p,{children:"The Platformatic CLI provides the following commands:"}),"\n",(0,l.jsx)(t.Z,{toc:p,minHeadingLevel:3,maxHeadingLevel:4}),"\n",(0,l.jsx)(n.h3,{id:"help",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Welcome to Platformatic. Available commands are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - display this message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - show more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"db"})," - start Platformatic DB; type ",(0,l.jsx)(n.code,{children:"platformatic db help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"service"})," - start Platformatic Service; type ",(0,l.jsx)(n.code,{children:"platformatic service help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"upgrade"})," - upgrade the Platformatic configuration to the latest version."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"gh"})," - create a new gh action for Platformatic deployments."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deploy"})," - deploy a Platformatic application to the cloud."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runtime"})," - start Platformatic Runtime; type ",(0,l.jsx)(n.code,{children:"platformatic runtime help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start a Platformatic application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"login"})," - generate a Platformatic login api key."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"client"})," - generate a Platformatic client."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"compile",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile all typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic compile\n"})}),"\n",(0,l.jsx)(n.p,{children:"This command will compile the TypeScript plugins for each platformatic application."}),"\n",(0,l.jsx)(n.h4,{id:"deploy",children:"deploy"}),"\n",(0,l.jsxs)(n.p,{children:["Deploys an application to the ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/category/platformatic-cloud",children:"Platformatic Cloud"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic deploy\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --type static/dynamic"})," - The type of the workspace."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-k, --keys FILE"})," - Specify a path to the workspace keys file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-l  --label TEXT"})," - The deploy label. Only for dynamic workspaces."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-e  --env FILE"}),' - The environment file to use. Default: ".env"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-s  --secrets FILE"}),' - The secrets file to use. Default: ".secrets.env"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--workspace-id uuid"})," - The workspace id where the application will be deployed."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--workspace-key TEXT"})," - The workspace key where the application will be deployed."]}),"\n"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"To deploy a Platformatic application to the cloud, you should go to the Platformatic cloud dashboard and create a workspace."}),"\n",(0,l.jsxs)(n.li,{children:["Once you have created a workspace, retrieve your workspace id and key from the workspace settings page. Optionally, you can download the provided workspace env file, which you can use with the ",(0,l.jsx)(n.code,{children:"--keys"})," option."]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"\u2139\ufe0f"}),"\n",(0,l.jsxs)(n.p,{children:["When deploying an application to a ",(0,l.jsx)(n.em,{children:(0,l.jsx)(n.strong,{children:"dynamic workspace"})}),", specify the deploy ",(0,l.jsx)(n.code,{children:"--label"})," option. You can find it on your cloud dashboard or you can specify a new one."]}),"\n",(0,l.jsxs)(n.p,{children:["If you do not specify an environment file to use with the ",(0,l.jsx)(n.code,{children:"-e"})," flag, ",(0,l.jsxs)(n.strong,{children:["ensure that a default environment file named ",(0,l.jsx)(n.code,{children:".env"})," exists"]}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Deploy a ",(0,l.jsx)(n.strong,{children:"static"})," Platformatic Cloud application."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic deploy \\\n    -t static \\\n    -c platformatic.db.json \\\n    -e .env.prototype \\\n    --workspace-id=00000000-0000-0000-0000-000000000000 \\\n    --workspace-key=11111111111111111111111111111111\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Deploy a ",(0,l.jsx)(n.strong,{children:"static"})," Platformatic Cloud application with a workspace keys file. The keys file can be downloaded from the Platformatic Console when generating a new API key."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic deploy \\\n    -t static \\\n    -c platformatic.db.json \\\n    -k foo.plt.txt\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"foo.plt.txt"})," must contain two variables for the workspace id and workspace API key."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"# Contents of foo.plt.txt\nPLATFORMATIC_STATIC_WORKSPACE_ID=00000000-0000-0000-0000-000000000000\nPLATFORMATIC_STATIC_WORKSPACE_API_KEY=11111111111111111111111111111111\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Deploy a ",(0,l.jsx)(n.strong,{children:"dynamic"})," Platformatic Cloud application."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic deploy \\\n    -t dynamic \\\n    -c platformatic.db.json \\\n    -l dev \\\n    --workspace-id=00000000-0000-0000-0000-000000000000 \\\n    --workspace-key=11111111111111111111111111111111\n"})}),"\n",(0,l.jsx)(n.h4,{id:"gh",children:"gh"}),"\n",(0,l.jsx)(n.p,{children:"Creates a gh action to deploy platformatic services on workspaces."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic gh -t dynamic\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-w  --workspace ID"})," - The workspace ID where the service will be deployed."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --type static/dynamic"})," - The type of the workspace. Defaults to static."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-b, --build"})," - Build the service before deploying (",(0,l.jsx)(n.code,{children:"npm run build"}),")."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.tml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.service.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/service/configuration",children:"Platformatic Service Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"login",children:"login"}),"\n",(0,l.jsx)(n.p,{children:"Generate a Platformatic login api key."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic deploy\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a path to a global platformatic config file. Defaults to ",(0,l.jsx)(n.code,{children:"~/.platformatic/config.json"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--browser"})," - Automatically open default browser. If process stdout is a TTY, the default is ",(0,l.jsx)(n.code,{children:"true"}),". Otherwise, the default is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"start",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start a Platformatic application with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic start\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect[=[host:]port]"})," - Start the Node.js debugger. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect-brk[=[host:]port]"})," - Start the Node.js debugger and block until a client has attached. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"upgrade",children:"upgrade"}),"\n",(0,l.jsx)(n.p,{children:"Upgrade the Platformatic schema configuration to the latest version."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic upgrade\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a schema configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.tml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.service.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/service/configuration",children:"Platformatic Service Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"client",children:"client"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic client <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"help-1",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Create a Fastify plugin that exposes a client for a remote OpenAPI or GraphQL API."}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a remote OpenAPI API, you can use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/to/schema/file -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a remote Graphql API, you can use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/graphql -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"Instead of an URL, you can also use a local file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client path/to/schema -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a service running in a Platformatic runime use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client --runtime SERVICE_NAME -n myclient\n"})}),"\n",(0,l.jsxs)(n.p,{children:["All the above commands will create a Fastify plugin that exposes a client in the ",(0,l.jsx)(n.code,{children:"request"})," object for the remote API in a folder ",(0,l.jsx)(n.code,{children:"myclient"})," and a file named myclient.js inside it."]}),"\n",(0,l.jsxs)(n.p,{children:["If platformatic config file is specified, it will be edited and a ",(0,l.jsx)(n.code,{children:"clients"})," section will be added.\nThen, in any part of your Platformatic application you can use the client."]}),"\n",(0,l.jsx)(n.p,{children:"You can use the client in your application in Javascript, calling a GraphQL endpoint:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"module.exports = async function (app, opts) {\n  app.post('/', async (request, reply) => {\n    const res = await request.myclient.graphql({\n      query: 'query { hello }'\n    })\n    return res\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"or in Typescript, calling an OpenAPI endpoint:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"import { FastifyInstance } from 'fastify'\n/// <reference path=\"./myclient\" />\n\nexport default async function (app: FastifyInstance) {\n  app.get('/', async (request, reply) => {\n    return request.myclient.get({})\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <name>"})," - Name of the client."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-f, --folder <name>"})," - Name of the plugin folder, defaults to --name value."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --typescript"})," - Generate the client plugin in TypeScript."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-R, --runtime <serviceId>"})," - Generate the client for the ",(0,l.jsx)(n.code,{children:"serviceId"})," running in the current runtime"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--frontend"})," - Generated a browser-compatible client that uses ",(0,l.jsx)(n.code,{children:"fetch"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full-response"})," - Client will return full response object rather than just the body."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full-request"})," - Client will be called with all parameters wrapped in ",(0,l.jsx)(n.code,{children:"body"}),", ",(0,l.jsx)(n.code,{children:"headers"})," and ",(0,l.jsx)(n.code,{children:"query"})," properties. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full"})," - Enables both ",(0,l.jsx)(n.code,{children:"--full-request"})," and ",(0,l.jsx)(n.code,{children:"--full-response"})," overriding them."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--optional-headers <headers>"})," - Comma separated string of headers that will be marked as optional in the type file. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--validate-response"})," - If set, will validate the response body against the schema. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--language js|ts"})," - Generate a Javascript or Typescript frontend client. Only works if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"composer",children:"composer"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic composer <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"create",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic Composer application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-2",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"create"})," - creates a new Platformatic Composer application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"openapi schemas fetch"})," - fetch OpenAPI schemas from services."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"openapi-schemas-fetch",children:"openapi schemas fetch"}),"\n",(0,l.jsx)(n.p,{children:"Fetch OpenAPI schemas from remote services to use in your Platformatic project."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic composer openapi schemas fetch\n"})}),"\n",(0,l.jsxs)(n.p,{children:["It will fetch all the schemas from the remote services and store them by path\nset in the ",(0,l.jsx)(n.code,{children:"platformatic.composer.json"})," file. If the path is not set, it will\nskip fetching the schema."]}),"\n",(0,l.jsx)(n.h4,{id:"start-1",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Composer server with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic composer start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.composer.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'  {\n    "server": {\n      "hostname": "127.0.0.1",\n      "port": 0,\n      "logger": {\n        "level": "info"\n      }\n    },\n    "composer": {\n      "services": [\n        {\n          "id": "service1",\n          "origin": "http://127.0.0.1:3051",\n          "openapi": {\n            "url": "/documentation/json"\n          }\n        },\n        {\n          "id": "service2",\n          "origin": "http://127.0.0.1:3052",\n          "openapi": {\n            "file": "./schemas/service2.openapi.json"\n          }\n        }\n      ],\n      "refreshTimeout": 1000\n    }\n  }\n'})}),"\n",(0,l.jsx)(n.p,{children:"By sending the SIGUSR2 signal, the server can be reloaded."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.composer.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.composer.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.composer.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/composer/configuration",children:"Platformatic Composer Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"db",children:"db"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic db <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-1",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db compile\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, the Platformatic DB will compile typescript\nplugins in the ",(0,l.jsx)(n.code,{children:"outDir"})," directory."]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"create-1",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic DB application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"connectionString <string>"})," - the connection string for your database (Default: ",(0,l.jsx)(n.code,{children:"sqlite://./db.sqlite"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations <boolean>"})," - Creates sample migrations (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-3",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compile"})," - compile typescript plugins."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"seed"})," - run a seed file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"types"})," - generate typescript types for entities."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema"})," - generate and print api schema."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations create"})," - generate do and undo migration files."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations apply"})," - apply migration files."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations-apply",children:"migrations apply"}),"\n",(0,l.jsx)(n.p,{children:"Apply all configured migrations to the database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The migrations will be applied in the order they are specified in the\nfolder defined in the configuration file. If you want to apply a specific migration,\nyou can use the ",(0,l.jsx)(n.code,{children:"--to"})," option:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply --to 001\n"})}),"\n",(0,l.jsx)(n.p,{children:"Here is an example migration:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"  CREATE TABLE graphs (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n  );\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can always rollback to a specific migration with:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply --to VERSION\n"})}),"\n",(0,l.jsx)(n.p,{children:"Use 000 to reset to the initial state."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --to <version>"})," - Migrate to a specific version."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations-create",children:"migrations create"}),"\n",(0,l.jsx)(n.p,{children:"Create next migration files."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations create\n"})}),"\n",(0,l.jsx)(n.p,{children:"It will generate do and undo sql files in the migrations folder. The name of the\nfiles will be the next migration number."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations create\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The migration files are named ",(0,l.jsx)(n.code,{children:"001.<do|undo>.sql"}),", ",(0,l.jsx)(n.code,{children:"002.<do|undo>.sql"})," etc..."]}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations",children:"migrations"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations create"})," - generate do and undo migration files."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations apply"})," - apply migration files."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"schema",children:"schema"}),"\n",(0,l.jsx)(n.p,{children:"Update the config schema file:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - update the JSON schema config available on ",(0,l.jsx)(n.code,{children:"platformatic.db.schema.json"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Your configuration on ",(0,l.jsx)(n.code,{children:"platformatic.db.json"})," has a schema defined to improve the developer experience and avoid mistakes when updating the configuration of Platformatic DB.\nWhen you run ",(0,l.jsx)(n.code,{children:"platformatic db init"}),", a new JSON ",(0,l.jsx)(n.code,{children:"$schema"})," property is added in ",(0,l.jsx)(n.code,{children:"platformatic.db.schema.json"}),". This can allow your IDE to add suggestions (f.e. mandatory/missing fields, types, default values) by opening the config in ",(0,l.jsx)(n.code,{children:"platformatic.db.json"}),".\nRunning ",(0,l.jsx)(n.code,{children:"platformatic db schema config"})," you can update your schema so that it matches well the latest changes available on your config."]}),"\n",(0,l.jsx)(n.p,{children:"Generate a schema from the database and prints it to standard output:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema graphql"})," - generate the GraphQL schema"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema openapi"})," - generate the OpenAPI schema"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"seed",children:"seed"}),"\n",(0,l.jsx)(n.p,{children:"Load a seed into the database. This is a convenience method that loads\na JavaScript file and configure @platformatic/sql-mapper to connect to\nthe database specified in the configuration file."}),"\n",(0,l.jsx)(n.p,{children:"Here is an example of a seed file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"  'use strict'\n\n  module.exports = async function ({ entities, db, sql }) {\n    await entities.graph.save({ input: { name: 'Hello' } })\n    await db.query(sql`\n      INSERT INTO graphs (name) VALUES ('Hello 2');\n    `)\n  }\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You can run this using the ",(0,l.jsx)(n.code,{children:"seed"})," command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db seed seed.js\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--config"})," - Path to the configuration file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"start-2",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic DB server with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic db start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a  configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.db.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'  {\n    "server": {\n      "hostname": "127.0.0.1",\n      "port": 0,\n      "logger": {\n        "level": "info"\n      }\n    },\n    "db": {\n      "connectionString": "sqlite://./db"\n    },\n    "migrations": {\n      "dir": "./migrations"\n    }\n  }\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Remember to create a migration, run the ",(0,l.jsx)(n.code,{children:"db help migrate"})," command to know more."]}),"\n",(0,l.jsxs)(n.p,{children:["All outstanding migrations will be applied to the database unless the\n",(0,l.jsx)(n.code,{children:"migrations.autoApply"})," configuration option is set to false."]}),"\n",(0,l.jsx)(n.p,{children:"By sending the SIGUSR2 signal, the server can be reloaded."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"types",children:"types"}),"\n",(0,l.jsx)(n.p,{children:"Generate typescript types for your entities from the database."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db types\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, the Platformatic DB will generate a ",(0,l.jsx)(n.code,{children:"types"}),"\nfolder with a typescript file for each database entity. It will also generate a\n",(0,l.jsx)(n.code,{children:"global.d.ts"})," file that injects the types into the Application instance."]}),"\n",(0,l.jsxs)(n.p,{children:["In order to add type support to your plugins, you need to install some additional\ndependencies. To do this, copy and run an ",(0,l.jsx)(n.code,{children:"npm install"}),' command with dependencies\nthat "platformatic db types" will ask you.']}),"\n",(0,l.jsx)(n.p,{children:"Here is an example of a platformatic plugin.js with jsdoc support.\nYou can use it to add autocomplete to your code."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"/// <reference path=\"./global.d.ts\" />\n'use strict'\n\n/** @param {import('fastify').FastifyInstance} app */\nmodule.exports = async function (app) {\n  app.get('/movie', async () => {\n    const movies = await app.platformatic.entities.movie.find({\n      where: { title: { eq: 'The Hitchhiker\\'s Guide to the Galaxy' } }\n    })\n    return movies[0].id\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"service",children:"service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic service <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-2",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic service compile\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, Platformatic Service will compile typescript\nplugins in the ",(0,l.jsx)(n.code,{children:"outDir"})," directory."]}),"\n",(0,l.jsxs)(n.p,{children:["Using the  ",(0,l.jsx)(n.code,{children:"--clean"})," flag, the outDir directory will be removed before the new compilation process starts."]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.service.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.service.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/service/configuration",children:"Platformatic Service Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"create-2",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic Service application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-4",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"create"})," - creates a new Platformatic Service application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - show more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - generate the schema configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compile"})," - compile the typescript files."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"versions bump"})," - bump a new version of the API."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"versions update"})," - update the latest version of the API."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"schema-1",children:"schema"}),"\n",(0,l.jsx)(n.p,{children:"Update the config schema file:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - update the JSON schema config available on ",(0,l.jsx)(n.code,{children:"platformatic.service.schema.json"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Your configuration on ",(0,l.jsx)(n.code,{children:"platformatic.service.json"})," has a schema defined to improve the developer experience and avoid mistakes when updating the configuration of Platformatic Service.\nWhen you initialize a new Platformatic service (f.e. running ",(0,l.jsx)(n.code,{children:"npm create platformatic@latest"}),"), a new JSON ",(0,l.jsx)(n.code,{children:"$schema"})," property is added in the ",(0,l.jsx)(n.code,{children:"platformatic.service.json"})," config. This can allow your IDE to add suggestions (f.e. mandatory/missing fields, types, default values) by opening the config in ",(0,l.jsx)(n.code,{children:"platformatic.service.json"}),".\nRunning ",(0,l.jsx)(n.code,{children:"platformatic service schema config"})," you can update your schema so that it matches well the latest changes available on your config."]}),"\n",(0,l.jsx)(n.h4,{id:"start-3",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Service with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic service start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a  configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.service.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "server": {\n    "hostname": "127.0.0.1",\n    "port": 0,\n    "logger": {\n      "level": "info"\n    }\n  },\n  "plugin": {\n    "path": "./plugin.js"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"versions-bump",children:"versions bump"}),"\n",(0,l.jsx)(n.p,{children:"Bump a new version of platformatic application API."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic service versions bump\n"})}),"\n",(0,l.jsx)(n.p,{children:"As a result, a new application API version will be created, and mappers for the previous version will be generated."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-v, --version <string>"})," - The name of the version to bump. Default: if first version, then ",(0,l.jsx)(n.code,{children:"v1"}),", else ",(0,l.jsx)(n.code,{children:"vX"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --prefix <string>"})," - The prefix to use for the new version. Default: if first version, then ",(0,l.jsx)(n.code,{children:"/v1"}),", else ",(0,l.jsx)(n.code,{children:"/vX"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--openai"})," - Use OpenAI to generate the version mappers plugins. Default: false."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--user-api-key <string>"})," - Platformatic user API key. If not specified, the key will be loaded from the ",(0,l.jsx)(n.code,{children:"~/.platformatic/config"})," file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"versions-update",children:"versions update"}),"\n",(0,l.jsx)(n.p,{children:"Update the latest version of platformatic application API."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic service versions update\n"})}),"\n",(0,l.jsx)(n.p,{children:"As a result, the latest application API version will be updated, and mappers for the previous version will be generated."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--openai <boolean>"})," - Use OpenAI to generate the version mappers plugins. Default: false."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--user-api-key <string>"})," - Platformatic user API key. If not specified, the key will be loaded from the ",(0,l.jsx)(n.code,{children:"~/.platformatic/config"})," file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.db.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.db.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"frontend",children:"frontend"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic client <url> --frontend --language <language>\n"})}),"\n",(0,l.jsx)(n.p,{children:"Create frontend code to consume the REST APIs of a Platformatic application."}),"\n",(0,l.jsxs)(n.p,{children:["From the directory you want the frontend code to be generated (typically ",(0,l.jsx)(n.code,{children:"<YOUR_FRONTEND_APP_DIRECTORY>/src/"}),") run -"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic frontend http://127.0.0.1:3042 ts\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"\u2139\ufe0f"}),"\n",(0,l.jsxs)(n.p,{children:["Where ",(0,l.jsx)(n.code,{children:"http://127.0.0.1:3042"})," must be replaced with your Platformatic application endpoint, and the language can either be ",(0,l.jsx)(n.code,{children:"ts"})," or ",(0,l.jsx)(n.code,{children:"js"}),". When the command is run, the Platformatic CLI generates -"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"api.d.ts"})," - A TypeScript module that includes all the OpenAPI-related types."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"api.ts"})," or ",(0,l.jsx)(n.code,{children:"api.js"})," - A module that includes a function for every single REST endpoint."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["If you use the ",(0,l.jsx)(n.code,{children:"--name"})," option it will create custom file names."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic frontend http://127.0.0.1:3042 ts --name foobar\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Will create ",(0,l.jsx)(n.code,{children:"foobar.ts"})," and ",(0,l.jsx)(n.code,{children:"foobar-types.d.ts"})]}),"\n",(0,l.jsxs)(n.p,{children:["Refer to the ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/guides/generate-frontend-code-to-consume-platformatic-rest-api",children:"dedicated guide"})," where the full process of generating and consuming the frontend code is described."]}),"\n",(0,l.jsx)(n.p,{children:"In case of problems, please check that:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The Platformatic app URL is valid."}),"\n",(0,l.jsx)(n.li,{children:"The Platformatic app whose URL belongs must be up and running."}),"\n",(0,l.jsxs)(n.li,{children:["OpenAPI must be enabled (",(0,l.jsx)(n.code,{children:"db.openapi"})," in your ",(0,l.jsx)(n.code,{children:"platformatic.db.json"})," is not set to ",(0,l.jsx)(n.code,{children:"false"}),"). You can find more details about the db configuration format ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/db/configuration/#db",children:"here"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["CORS must be managed in your Platformatic app (",(0,l.jsx)(n.code,{children:"server.cors.origin.regexp"})," in your ",(0,l.jsx)(n.code,{children:"platformatic.db.json"})," is set to ",(0,l.jsx)(n.code,{children:"/*/"}),", for instance). You can find more details about the cors configuration ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/reference/service/configuration/#server",children:"here"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"runtime",children:"runtime"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic runtime <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-3",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile all typescript plugins for all services."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic runtime compile\n"})}),"\n",(0,l.jsx)(n.p,{children:"This command will compile the TypeScript\nplugins for each services registered in the runtime."}),"\n",(0,l.jsx)(n.h4,{id:"help-5",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the application."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"start-4",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Runtime with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic runtime start\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can also specify a custom routes file, for example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic runtime start routes.js\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Where ",(0,l.jsx)(n.code,{children:"routes.js"})," is:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"module.exports = async function (app) {\n  app.get('/hello', async () => {\n    return { hello: 'hello123' }\n  })\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"start-5",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start a Platformatic application with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic start\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect[=[host:]port]"})," - Start the Node.js debugger. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect-brk[=[host:]port]"})," - Start the Node.js debugger and block until a client has attached. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(j,{...e})}):j(e)}}}]);