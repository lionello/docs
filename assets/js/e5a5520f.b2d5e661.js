"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[30769,37161],{27466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(85893),r=t(11151),o=t(5840);const i={},s="Movie Quotes App Tutorial",l={id:"getting-started/movie-quotes-app-tutorial",title:"Movie Quotes App Tutorial",description:"This tutorial will help you learn how to build a full stack application on top",source:"@site/versioned_docs/version-1.23.0/getting-started/movie-quotes-app-tutorial.md",sourceDirName:"getting-started",slug:"/getting-started/movie-quotes-app-tutorial",permalink:"/docs/getting-started/movie-quotes-app-tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.23.0/getting-started/movie-quotes-app-tutorial.md",tags:[],version:"1.23.0",frontMatter:{},sidebar:"docs",previous:{title:"Quick Start Guide",permalink:"/docs/getting-started/quick-start-guide"},next:{title:"Architecture",permalink:"/docs/getting-started/architecture"}},d={},c=[{value:"What we&#39;re going to cover",id:"what-were-going-to-cover",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build the backend",id:"build-the-backend",level:2},{value:"Create a Platformatic API",id:"create-a-platformatic-api",level:3},{value:"Define the database schema",id:"define-the-database-schema",level:3},{value:"Create an entity relationship",id:"create-an-entity-relationship",level:3},{value:"Populate the database",id:"populate-the-database",level:3},{value:"Build the frontend",id:"build-the-frontend",level:2},{value:"Create an Astro application",id:"create-an-astro-application",level:3},{value:"Create a layout",id:"create-a-layout",level:3},{value:"Integrate the urql GraphQL client",id:"integrate-the-urql-graphql-client",level:3},{value:"Display all quotes",id:"display-all-quotes",level:3},{value:"Integrate Tailwind for styling",id:"integrate-tailwind-for-styling",level:3},{value:"Style the listing page",id:"style-the-listing-page",level:3},{value:"Create an add quote page",id:"create-an-add-quote-page",level:3},{value:"Send form data to the API",id:"send-form-data-to-the-api",level:3},{value:"Add autosuggest for movies",id:"add-autosuggest-for-movies",level:3},{value:"Create an edit quote page",id:"create-an-edit-quote-page",level:3},{value:"Add delete quote functionality",id:"add-delete-quote-functionality",level:3},{value:"Build a &quot;like&quot; quote feature",id:"build-a-like-quote-feature",level:2},{value:"Create an API migration",id:"create-an-api-migration",level:3},{value:"Create an API plugin",id:"create-an-api-plugin",level:3},{value:"Add a REST API route",id:"add-a-rest-api-route",level:3},{value:"Add a GraphQL API mutation",id:"add-a-graphql-api-mutation",level:3},{value:"Enable CORS on the API",id:"enable-cors-on-the-api",level:3},{value:"Add like quote functionality",id:"add-like-quote-functionality",level:3},{value:"Sort the listing by top quotes",id:"sort-the-listing-by-top-quotes",level:3},{value:"Wrapping up",id:"wrapping-up",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"movie-quotes-app-tutorial",children:"Movie Quotes App Tutorial"}),"\n",(0,a.jsx)(n.p,{children:"This tutorial will help you learn how to build a full stack application on top\nof Platformatic DB. We're going to build an application that allows us to\nsave our favourite movie quotes. We'll also be building in custom API functionality\nthat allows for some neat user interaction on our frontend."}),"\n",(0,a.jsxs)(n.p,{children:["You can find the complete code for the application that we're going to build\n",(0,a.jsx)(n.a,{href:"https://github.com/platformatic/tutorial-movie-quotes-app",children:"on GitHub"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["We'll be building the frontend of our application with the ",(0,a.jsx)(n.a,{href:"https://astro.build/",children:"Astro"}),"\nframework, but the GraphQL API integration steps that we're going to cover can\nbe applied with most frontend frameworks."]})}),"\n",(0,a.jsx)(n.h2,{id:"what-were-going-to-cover",children:"What we're going to cover"}),"\n",(0,a.jsx)(n.p,{children:"In this tutorial we'll learn how to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Create a Platformatic API"}),"\n",(0,a.jsx)(n.li,{children:"Apply database migrations"}),"\n",(0,a.jsx)(n.li,{children:"Create relationships between our API entities"}),"\n",(0,a.jsx)(n.li,{children:"Populate our database tables"}),"\n",(0,a.jsx)(n.li,{children:"Build a frontend application that integrates with our GraphQL API"}),"\n",(0,a.jsx)(n.li,{children:"Extend our API with custom functionality"}),"\n",(0,a.jsx)(n.li,{children:"Enable CORS on our Platformatic API"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"To follow along with this tutorial you'll need to have these things installed:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nodejs.org/",children:"Node.js"})," >= v18.8.0 or >= v20.6.0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.npmjs.com/cli/",children:"npm"})," v7 or later"]}),"\n",(0,a.jsxs)(n.li,{children:["A code editor, for example ",(0,a.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You'll also need to have some experience with JavaScript, and be comfortable with\nrunning commands in a terminal."}),"\n",(0,a.jsx)(n.h2,{id:"build-the-backend",children:"Build the backend"}),"\n",(0,a.jsx)(n.h3,{id:"create-a-platformatic-api",children:"Create a Platformatic API"}),"\n",(0,a.jsx)(n.p,{children:"First, let's create our project directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p tutorial-movie-quotes-app/apps/movie-quotes-api/\n\ncd tutorial-movie-quotes-app/apps/movie-quotes-api/\n"})}),"\n",(0,a.jsx)(o.default,{}),"\n",(0,a.jsx)(n.h3,{id:"define-the-database-schema",children:"Define the database schema"}),"\n",(0,a.jsx)(n.p,{children:"Let's create a new directory to store our migration files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir migrations\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then we'll create a migration file named ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"001.do.sql"})})," in the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"migrations"})}),"\ndirectory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE quotes (\n  id INTEGER PRIMARY KEY,\n  quote TEXT NOT NULL,\n  said_by VARCHAR(255) NOT NULL,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now let's setup ",(0,a.jsx)(n.code,{children:"migrations"})," in our Platformatic configuration\nfile, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"platformatic.db.json"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://platformatic.dev/schemas/v0.23.2/db",\n  "server": {\n    "hostname": "{PLT_SERVER_HOSTNAME}",\n    "port": "{PORT}",\n    "logger": {\n      "level": "{PLT_SERVER_LOGGER_LEVEL}"\n    }\n  },\n  "db": {\n    "connectionString": "{DATABASE_URL}",\n    "graphql": true,\n    "openapi": true\n  },\n  "plugins": {\n    "paths": [\n      "plugin.js"\n    ]\n  },\n  "types": {\n    "autogenerate": true\n  },\n  "migrations": {\n    "dir": "migrations",\n    "autoApply": true\n  }\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Take a look at the ",(0,a.jsx)(n.a,{href:"/docs/reference/db/configuration",children:"Configuration reference"}),"\nto see all the supported configuration settings."]})}),"\n",(0,a.jsx)(n.p,{children:"Now we can start the Platformatic DB server:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,a.jsx)(n.p,{children:"Our Platformatic DB server should start, and we'll see messages like these:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'[11:26:48.772] INFO (15235): running 001.do.sql\n[11:26:48.864] INFO (15235): server listening\n    url: "http://127.0.0.1:3042"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Let's open a new terminal and make a request to our server's REST API that\ncreates a new quote:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl --request POST --header "Content-Type: application/json" \\\n  -d "{ \\"quote\\": \\"Toto, I\'ve got a feeling we\'re not in Kansas anymore.\\", \\"saidBy\\": \\"Dorothy Gale\\" }" \\\n  http://localhost:3042/quotes\n'})}),"\n",(0,a.jsx)(n.p,{children:"We should receive a response like this from the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{"id":1,"quote":"Toto, I\'ve got a feeling we\'re not in Kansas anymore.","saidBy":"Dorothy Gale","createdAt":"1684167422600"}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-an-entity-relationship",children:"Create an entity relationship"}),"\n",(0,a.jsxs)(n.p,{children:["Now let's create a migration file named ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"002.do.sql"})})," in the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"migrations"})}),"\ndirectory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE movies (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL UNIQUE\n);\n\nALTER TABLE quotes ADD COLUMN movie_id INTEGER REFERENCES movies(id);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This SQL will create a new ",(0,a.jsx)(n.code,{children:"movies"})," database table and also add a ",(0,a.jsx)(n.code,{children:"movie_id"}),"\ncolumn to the ",(0,a.jsx)(n.code,{children:"quotes"})," table. This will allow us to store movie data in the\n",(0,a.jsx)(n.code,{children:"movies"})," table and then reference them by ID in our ",(0,a.jsx)(n.code,{children:"quotes"})," table."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's stop the Platformatic DB server with ",(0,a.jsx)(n.code,{children:"Ctrl + C"}),", and then start it again:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The new migration should be automatically applied and we'll see the log message\n",(0,a.jsx)(n.code,{children:"running 002.do.sql"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Our Platformatic DB server also provides a GraphQL API. Let's open up the GraphiQL\napplication in our web browser:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://localhost:3042/graphiql",children:"http://localhost:3042/graphiql"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Now let's run this query with GraphiQL to add the movie for the quote that we\nadded earlier:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  saveMovie(input: { name: "The Wizard of Oz" }) {\n    id\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"We should receive a response like this from the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "saveMovie": {\n      "id": "1"\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now we can update our quote to reference the movie:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"mutation {\n  saveQuote(input: { id: 1, movieId: 1 }) {\n    id\n    quote\n    saidBy\n    createdAt\n    movie {\n      id\n      name\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"We should receive a response like this from the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "saveQuote": {\n      "id": "1",\n      "quote": "Toto, I\'ve got a feeling we\'re not in Kansas anymore.",\n      "saidBy": "Dorothy Gale",\n      "movie": {\n        "id": "1",\n        "name": "The Wizard of Oz"\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Our Platformatic DB server has automatically identified the relationship\nbetween our ",(0,a.jsx)(n.code,{children:"quotes"})," and ",(0,a.jsx)(n.code,{children:"movies"})," database tables. This allows us to make\nGraphQL queries that retrieve quotes and their associated movies at the same\ntime. For example, to retrieve all quotes from our database we can run:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"query {\n  quotes {\n    id\n    quote\n    saidBy\n    createdAt\n    movie {\n      id\n      name\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"To view the GraphQL schema that's generated for our API by Platformatic DB,\nwe can run this command in our terminal:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx platformatic db schema graphql\n"})}),"\n",(0,a.jsx)(n.p,{children:"The GraphQL schema shows all of the queries and mutations that we can run\nagainst our GraphQL API, as well as the types of data that it expects as input."}),"\n",(0,a.jsx)(n.h3,{id:"populate-the-database",children:"Populate the database"}),"\n",(0,a.jsx)(n.p,{children:'Our movie quotes database is looking a little empty! We\'re going to create a\n"seed" script to populate it with some data.'}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a new file named ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"seed.js"})})," and copy and paste in this code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use strict'\n\nconst quotes = [\n  {\n    quote: \"Toto, I've got a feeling we're not in Kansas anymore.\",\n    saidBy: 'Dorothy Gale',\n    movie: 'The Wizard of Oz'\n  },\n  {\n    quote: \"You're gonna need a bigger boat.\",\n    saidBy: 'Martin Brody',\n    movie: 'Jaws'\n  },\n  {\n    quote: 'May the Force be with you.',\n    saidBy: 'Han Solo',\n    movie: 'Star Wars'\n  },\n  {\n    quote: 'I have always depended on the kindness of strangers.',\n    saidBy: 'Blanche DuBois',\n    movie: 'A Streetcar Named Desire'\n  }\n]\n\nmodule.exports = async function ({ entities, db, sql }) {\n  for (const values of quotes) {\n    const movie = await entities.movie.save({ input: { name: values.movie } })\n\n    console.log('Created movie:', movie)\n\n    const quote = {\n      quote: values.quote,\n      saidBy: values.saidBy,\n      movieId: movie.id\n    }\n\n    await entities.quote.save({ input: quote })\n\n    console.log('Created quote:', quote)\n  }\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Take a look at the ",(0,a.jsx)(n.a,{href:"/docs/guides/seed-a-database",children:"Seed a Database"})," guide to learn more\nabout how database seeding works with Platformatic DB."]})}),"\n",(0,a.jsx)(n.p,{children:"Let's stop our Platformatic DB server running and remove our SQLite database:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"rm db.sqlite\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now let's create a fresh SQLite database by running our migrations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx platformatic db migrations apply\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then let's populate the ",(0,a.jsx)(n.code,{children:"quotes"})," and ",(0,a.jsx)(n.code,{children:"movies"})," tables with data using our\nseed script:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx platformatic db seed seed.js\n"})}),"\n",(0,a.jsx)(n.p,{children:"Our database is full of data, but we don't have anywhere to display it. It's\ntime to start building our frontend!"}),"\n",(0,a.jsx)(n.h2,{id:"build-the-frontend",children:"Build the frontend"}),"\n",(0,a.jsxs)(n.p,{children:["We're now going to use ",(0,a.jsx)(n.a,{href:"https://astro.build/",children:"Astro"})," to build our frontend\napplication. If you've not used it before, you might find it helpful\nto read ",(0,a.jsx)(n.a,{href:"https://docs.astro.build/en/core-concepts/astro-components/",children:"this overview"}),"\non how Astro components are structured."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Astro provide some extensions and tools to help improve your\n",(0,a.jsx)(n.a,{href:"https://docs.astro.build/en/editor-setup/",children:"Editor Setup"})," when building an\nAstro application."]})}),"\n",(0,a.jsx)(n.h3,{id:"create-an-astro-application",children:"Create an Astro application"}),"\n",(0,a.jsxs)(n.p,{children:["In the root ",(0,a.jsx)(n.code,{children:"tutorial-movie-quotes-app"})," of our project, let's create a new directory for our frontent\napplication:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p apps/movie-quotes-frontend/\n\ncd apps/movie-quotes-frontend/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then we'll create a new ",(0,a.jsx)(n.code,{children:"Astro"})," project:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm create astro@latest -- --template basics\n"})}),"\n",(0,a.jsx)(n.p,{children:"It will ask you some questions about how you'd like to set up\nyour new Astro project. For this guide, select these options:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Where should we create your new project?"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"   .\n\u25fc  tmpl Using basics as project template\n\u2714  Template copied\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Install dependencies?"})," (it's buggy, we'll do it afterwards)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"   No\n\u25fc  No problem! Remember to install dependencies after setup.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Do you plan to write TypeScript?"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"   No\n\u25fc  No worries! TypeScript is supported in Astro by default, but you are free to continue writing JavaScript instead.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Initialize a new git repository?"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"   No\n\u25fc  Sounds good! You can always run git init manually.\n\nLiftoff confirmed. Explore your project!\nRun npm dev to start the dev server. CTRL+C to stop.\nAdd frameworks like react or tailwind using astro add.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now we'll edit our Astro configuration file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"astro.config.mjs"})})," and\ncopy and paste in this code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { defineConfig } from 'astro/config'\n\n// https://astro.build/config\nexport default defineConfig({\n  output: 'server'\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And we'll also edit our ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"tsconfig.json"})})," file and add in this configuration:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "extends": "astro/tsconfigs/base",\n  "compilerOptions": {\n    "types": ["astro/client"]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now we can start up the Astro development server with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then load up the frontend in our browser at ",(0,a.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,a.jsxs)(n.p,{children:["Now that everything is working, we'll remove all default ",(0,a.jsx)(n.code,{children:"*.astro files"})," from the ",(0,a.jsx)(n.code,{children:"src/"})," directory, but we'll keep the directory structure. You can delete them now, or override them later."]}),"\n",(0,a.jsx)(n.h3,{id:"create-a-layout",children:"Create a layout"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/layouts"})})," directory, let's create a new file named ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"Layout.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface Props {\n  title: string;\n  page?: string;\n}\nconst { title, page } = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width" />\n    <title>{title}</title>\n  </head>\n  <body>\n    <header>\n      <h1>\ud83c\udfac Movie Quotes</h1>\n    </header>\n    <nav>\n      <a href="/">All quotes</a>\n    </nav>\n    <section>\n      <slot />\n    </section>\n  </body>\n</html>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The code between the ",(0,a.jsx)(n.code,{children:"---"})," is known as the component script, and the\ncode after that is the component template. The component script will ",(0,a.jsx)(n.em,{children:"only"})," run\non the server side when a web browser makes a request. The component template\nis rendered server side and sent back as an HTML response to the web browser."]}),"\n",(0,a.jsxs)(n.p,{children:["Now we'll update ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})})," to use this ",(0,a.jsx)(n.code,{children:"Layout"})," component.\nLet's replace the contents of ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})})," with this code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nimport Layout from \'../layouts/Layout.astro\';\n---\n\n<Layout title="All quotes" page="listing">\n  <main>\n    <p>We\'ll list all the movie quotes here.</p>\n  </main>\n</Layout>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"integrate-the-urql-graphql-client",children:"Integrate the urql GraphQL client"}),"\n",(0,a.jsxs)(n.p,{children:["We're now going to integrate the ",(0,a.jsx)(n.a,{href:"https://formidable.com/open-source/urql/",children:"URQL"}),"\nGraphQL client into our frontend application. This will allow us to run queries\nand mutations against our Platformatic GraphQL API."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's first install ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/@urql/core",children:"@urql/core"})," and\n",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/graphql",children:"graphql"})," as project dependencies:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @urql/core graphql\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's create a new ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:".env"})})," file and add this configuration:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"PUBLIC_GRAPHQL_API_ENDPOINT=http://127.0.0.1:3042/graphql\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now we'll create a new directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src/lib\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then create a new file named ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/lib/quotes-api.js"})}),". In that file we'll\ncreate a new URQL client:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/lib/quotes-api.js\n\nimport { createClient, cacheExchange, fetchExchange } from '@urql/core';\n\nconst graphqlClient = createClient({\n  url: import.meta.env.PUBLIC_GRAPHQL_API_ENDPOINT,\n  requestPolicy: \"network-only\",\n  exchanges: [cacheExchange, fetchExchange]\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"We'll also add a thin wrapper around the client that does some basic error\nhandling for us:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// src/lib/quotes-api.js\n\nasync function graphqlClientWrapper(method, gqlQuery, queryVariables = {}) {\n  const queryResult = await graphqlClient[method](\n    gqlQuery,\n    queryVariables\n  ).toPromise();\n\n  if (queryResult.error) {\n    console.error("GraphQL error:", queryResult.error);\n  }\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error,\n  };\n}\n\nexport const quotesApi = {\n\tasync query(gqlQuery, queryVariables = {}) {\n\t\treturn await graphqlClientWrapper("query", gqlQuery, queryVariables);\n\t},\n\tasync mutation(gqlQuery, queryVariables = {}) {\n\t\treturn await graphqlClientWrapper("mutation", gqlQuery, queryVariables);\n\t}\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And lastly, we'll export ",(0,a.jsx)(n.code,{children:"gql"})," from the ",(0,a.jsx)(n.code,{children:"@urql/core"})," package, to make it\nsimpler for us to write GraphQL queries in our pages:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// src/lib/quotes-api.js\n\nexport { gql } from "@urql/core";\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Stop the Astro dev server and then start it again so it picks up the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:".env"})}),"\nfile:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,a.jsx)(n.h3,{id:"display-all-quotes",children:"Display all quotes"}),"\n",(0,a.jsxs)(n.p,{children:["Let's display all the movie quotes in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),"."]}),"\n",(0,a.jsx)(n.p,{children:"First, we'll update the component script at the top and add in a query to\nour GraphQL API for quotes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../layouts/Layout.astro';\n// highlight-start\nimport { quotesApi, gql } from '../lib/quotes-api';\n\nconst { data } = await quotesApi.query(gql`\n  query {\n    quotes {\n      id\n      quote\n      saidBy\n      createdAt\n      movie {\n        id\n        name\n      }\n    }\n  }\n`);\n\nconst quotes = data?.quotes || [];\n// highlight-end\n---\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then we'll update the component template to display the quotes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'<Layout title="All quotes" page="listing">\n  <main>\n// highlight-start\n    {quotes.length > 0 ? quotes.map((quote) => (\n      <div>\n        <blockquote>\n          <p>{quote.quote}</p>\n        </blockquote>\n        <p>\n          \u2014 {quote.saidBy}, {quote.movie?.name}\n        </p>\n        <div>\n          <span>Added {new Date(Number(quote.createdAt)).toUTCString()}</span>\n        </div>\n      </div>\n    )) : (\n      <p>No movie quotes have been added.</p>\n    )}\n// highlight-end\n  </main>\n</Layout>\n'})}),"\n",(0,a.jsx)(n.p,{children:"And just like that, we have all the movie quotes displaying on the page!"}),"\n",(0,a.jsx)(n.h3,{id:"integrate-tailwind-for-styling",children:"Integrate Tailwind for styling"}),"\n",(0,a.jsxs)(n.p,{children:["Automatically add the ",(0,a.jsx)(n.a,{href:"https://docs.astro.build/en/guides/integrations-guide/tailwind/",children:"@astrojs/tailwind integration"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx astro add tailwind --yes\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Add the Tailwind CSS ",(0,a.jsx)(n.a,{href:"https://tailwindcss.com/docs/typography-plugin",children:"Typography"}),"\nand ",(0,a.jsx)(n.a,{href:"https://github.com/tailwindlabs/tailwindcss-forms",children:"Forms"})," plugins:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @tailwindcss/typography @tailwindcss/forms\n"})}),"\n",(0,a.jsx)(n.p,{children:"Import the plugins in our Tailwind configuration file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// tailwind.config.cjs\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],\n  theme: {\n    extend: {}\n  },\n// highlight-start\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography')\n  ]\n// highlight-end\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Stop the Astro dev server and then start it again so it picks up all the\nconfiguration changes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,a.jsx)(n.h3,{id:"style-the-listing-page",children:"Style the listing page"}),"\n",(0,a.jsxs)(n.p,{children:["To style our listing page, let's add CSS classes to the component template in\n",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/layouts/Layout.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface Props {\n\ttitle: string;\n\tpage?: string;\n}\n\nconst { title, page } = Astro.props;\n\n// highlight-next-line\nconst navActiveClasses = "font-bold bg-yellow-400 no-underline";\n---\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width" />\n    <title>{title}</title>\n  </head>\n// highlight-next-line\n  <body class="py-8">\n// highlight-next-line\n    <header class="prose mx-auto mb-6">\n      <h1>\ud83c\udfac Movie Quotes</h1>\n    </header>\n// highlight-next-line\n    <nav class="prose mx-auto mb-6 border-y border-gray-200 flex">\n// highlight-next-line\n      <a href="/" class={`p-3 ${page === "listing" && navActiveClasses}`}>All quotes</a>\n    </nav>\n// highlight-next-line\n    <section class="prose mx-auto">\n      <slot />\n    </section>\n  </body>\n</html>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's add CSS classes to the component template in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'<Layout title="All quotes">\n  <main>\n    {quotes.length > 0 ? quotes.map((quote) => (\n// highlight-next-line\n      <div class="border-b mb-6">\n// highlight-next-line\n        <blockquote class="text-2xl mb-0">\n// highlight-next-line\n          <p class="mb-4">{quote.quote}</p>\n        </blockquote>\n// highlight-next-line\n        <p class="text-xl mt-0 mb-8 text-gray-400">\n          \u2014 {quote.saidBy}, {quote.movie?.name}\n        </p>\n// highlight-next-line\n        <div class="flex flex-col mb-6 text-gray-400">\n// highlight-next-line\n          <span class="text-gray-400 italic">Added {new Date(Number(quote.createdAt)).toUTCString()}</span>\n        </div>\n      </div>\n    )) : (\n      <p>No movie quotes have been added.</p>\n    )}\n  </main>\n</Layout>\n'})}),"\n",(0,a.jsx)(n.p,{children:"Our listing page is now looking much more user friendly!"}),"\n",(0,a.jsx)(n.h3,{id:"create-an-add-quote-page",children:"Create an add quote page"}),"\n",(0,a.jsx)(n.p,{children:"We're going to create a form component that we can use for adding and editing\nquotes."}),"\n",(0,a.jsxs)(n.p,{children:["First let's create a new component file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/components/QuoteForm.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface QuoteFormData {\n  id?: number;\n  quote?: string;\n  saidBy?: string;\n  movie?: string;\n}\n\nexport interface Props {\n  action: string;\n  values?: QuoteFormData;\n  saveError?: boolean;\n  loadError?: boolean;\n  submitLabel: string;\n}\n\nconst { action, values = {}, saveError, loadError, submitLabel } = Astro.props;\n---\n\n{saveError && <p class="text-lg bg-red-200 p-4">There was an error saving the quote. Please try again.</p>}\n{loadError && <p class="text-lg bg-red-200 p-4">There was an error loading the quote. Please try again.</p>}\n\n<form method="post" action={action} class="grid grid-cols-1 gap-6">\n  <label for="quote" class="block">\n    <span>Quote</span>\n    <textarea id="quote" name="quote" required="required" class="mt-1 w-full">{values.quote}</textarea>\n  </label>\n  <label for="said-by" class="block">\n    <span>Said by</span>\n    <input type="text" id="said-by" name="saidBy" required="required" value={values.saidBy} class="mt-1 w-full">\n  </label>\n  <label for="movie" class="block">\n    <span>Movie</span>\n    <input type="text" id="movie" name="movie" required="required" autocomplete="off" value={values.movie} class="form-input mt-1 w-full">\n  </label>\n  <input type="submit" value={submitLabel} disabled={loadError && "disabled"} class="bg-yellow-400 hover:bg-yellow-500 text-gray-900 round p-3" />\n</form>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Create a new page file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/add.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nimport Layout from \'../layouts/Layout.astro\';\nimport QuoteForm from \'../components/QuoteForm.astro\';\nimport type { QuoteFormData } from \'../components/QuoteForm.astro\';\n\nlet formData: QuoteFormData = {};\nlet saveError = false;\n---\n\n<Layout title="Add a movie quote" page="add">\n  <main>\n    <h2>Add a quote</h2>\n    <QuoteForm action="/add" values={formData} saveError={saveError} submitLabel="Add quote" />\n  </main>\n</Layout>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And now let's add a link to this page in the layout navigation in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/layouts/Layout.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'<nav class="prose mx-auto mb-6 border-y border-gray-200 flex">\n  <a href="/" class={`p-3 ${page === "listing" && navActiveClasses}`}>All quotes</a>\n// highlight-next-line\n  <a href="/add" class={`p-3 ${page === "add" && navActiveClasses}`}>Add a quote</a>\n</nav>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"send-form-data-to-the-api",children:"Send form data to the API"}),"\n",(0,a.jsx)(n.p,{children:"When a user submits the add quote form we want to send the form data to our API\nso it can then save it to our database. Let's wire that up now."}),"\n",(0,a.jsxs)(n.p,{children:["First we're going to create a new file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/lib/request-utils.js"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export function isPostRequest (request) {\n  return request.method === 'POST'\n}\n\nexport async function getFormData (request) {\n  const formData = await request.formData()\n\n  return Object.fromEntries(formData.entries())\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's update the component script in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/add.astro"})})," to use\nthese new request utility functions:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../layouts/Layout.astro';\nimport QuoteForm from '../components/QuoteForm.astro';\nimport type { QuoteFormData } from '../components/QuoteForm.astro';\n\n// highlight-next-line\nimport { isPostRequest, getFormData } from '../lib/request-utils';\n\nlet formData: QuoteFormData = {};\nlet saveError = false;\n\n// highlight-start\nif (isPostRequest(Astro.request)) {\n  formData = await getFormData(Astro.request);\n}\n// highlight-end\n---\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When we create a new quote entity record via our API, we need to include a\n",(0,a.jsx)(n.code,{children:"movieId"})," field that references a movie entity record. This means that when a\nuser submits the add quote form we need to:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Check if a movie entity record already exists with that movie name"}),"\n",(0,a.jsxs)(n.li,{children:["Return the movie ",(0,a.jsx)(n.code,{children:"id"})," if it does exist"]}),"\n",(0,a.jsx)(n.li,{children:"If it doesn't exist, create a new movie entity record and return the movie ID"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's update the ",(0,a.jsx)(n.code,{children:"import"})," statement at the top of ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/lib/quotes-api.js"})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"-import { createClient } from '@urql/core'\n+import { createClient, gql } from '@urql/core'\n"})}),"\n",(0,a.jsx)(n.p,{children:"And then add a new method that will return a movie ID for us:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async function getMovieId (movieName) {\n  movieName = movieName.trim()\n\n  let movieId = null\n\n  // Check if a movie already exists with the provided name.\n  const queryMoviesResult = await quotesApi.query(\n    gql`\n      query ($movieName: String!) {\n        movies(where: { name: { eq: $movieName } }) {\n          id\n        }\n      }\n    `,\n    { movieName }\n  )\n\n  if (queryMoviesResult.error) {\n    return null\n  }\n\n  const movieExists = queryMoviesResult.data?.movies.length === 1\n  if (movieExists) {\n    movieId = queryMoviesResult.data.movies[0].id\n  } else {\n    // Create a new movie entity record.\n    const saveMovieResult = await quotesApi.mutation(\n      gql`\n        mutation ($movieName: String!) {\n          saveMovie(input: { name: $movieName }) {\n            id\n          }\n        }\n      `,\n      { movieName }\n    )\n\n    if (saveMovieResult.error) {\n      return null\n    }\n\n    movieId = saveMovieResult.data?.saveMovie.id\n  }\n\n  return movieId\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"And let's export it too:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const quotesApi = {\n  async query (gqlQuery, queryVariables = {}) {\n    return await graphqlClientWrapper('query', gqlQuery, queryVariables)\n  },\n  async mutation (gqlQuery, queryVariables = {}) {\n    return await graphqlClientWrapper('mutation', gqlQuery, queryVariables)\n  },\n// highlight-next-line\n  getMovieId\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now we can wire up the last parts in the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/add.astro"})})," component\nscript:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../layouts/Layout.astro';\nimport QuoteForm from '../components/QuoteForm.astro';\nimport type { QuoteFormData } from '../components/QuoteForm.astro';\n\n// highlight-next-line\nimport { quotesApi, gql } from '../lib/quotes-api';\nimport { isPostRequest, getFormData } from '../lib/request-utils';\n\nlet formData: QuoteFormData = {};\nlet saveError = false;\n\nif (isPostRequest(Astro.request)) {\n  formData = await getFormData(Astro.request);\n\n// highlight-start\n  const movieId = await quotesApi.getMovieId(formData.movie);\n\n  if (movieId) {\n    const quote = {\n      quote: formData.quote,\n      saidBy: formData.saidBy,\n      movieId,\n    };\n\n    const { error } = await quotesApi.mutation(gql`\n      mutation($quote: QuoteInput!) {\n        saveQuote(input: $quote) {\n          id\n        }\n      }\n    `, { quote });\n\n    if (!error) {\n      return Astro.redirect('/');\n    } else {\n      saveError = true;\n    }\n  } else {\n    saveError = true;\n  }\n// highlight-end\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"add-autosuggest-for-movies",children:"Add autosuggest for movies"}),"\n",(0,a.jsx)(n.p,{children:"We can create a better experience for our users by autosuggesting the movie name\nwhen they're adding a new quote."}),"\n",(0,a.jsxs)(n.p,{children:["Let's open up ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/components/QuoteForm.astro"})})," and import our API helper methods\nin the component script:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"import { quotesApi, gql } from '../lib/quotes-api.js';\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then let's add in a query to our GraphQL API for all movies:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"const { data } = await quotesApi.query(gql`\n  query {\n    movies {\n      name\n    }\n  }\n`);\n\nconst movies = data?.movies || [];\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now lets update the ",(0,a.jsx)(n.em,{children:"Movie"})," field in the component template to use the\narray of movies that we've retrieved from the API:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'<label for="movie" class="block">\n  <span>Movie</span>\n// highlight-start\n  <input list="movies" id="movie" name="movie" required="required" autocomplete="off" value={values.movie} class="form-input mt-1 w-full">\n  <datalist id="movies">\n    {movies.map(({ name }) => (\n      <option>{name}</option>\n    ))}\n  </datalist>\n// highlight-end\n</label>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-an-edit-quote-page",children:"Create an edit quote page"}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a new directory, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/edit/"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src/pages/edit/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And inside of it, let's create a new page, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"[id].astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../../layouts/Layout.astro';\nimport QuoteForm, { QuoteFormData } from '../../components/QuoteForm.astro';\n\nconst id = Number(Astro.params.id);\n\nlet formValues: QuoteFormData = {};\nlet loadError = false;\nlet saveError = false;\n---\n\n<Layout title=\"Edit movie quote\">\n  <main>\n    <h2>Edit quote</h2>\n    <QuoteForm action={`/edit/${id}`} values={formValues} saveError={saveError} loadError={loadError} submitLabel=\"Update quote\" />\n  </main>\n</Layout>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You'll see that we're using the same ",(0,a.jsx)(n.code,{children:"QuoteForm"})," component that our add quote\npage uses. Now we're going to wire up our edit page so that it can load an\nexisting quote from our API and save changes back to the API when the form is\nsubmitted."]}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"[id.astro]"})})," component script, let's add some code to take care of\nthese tasks:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../../layouts/Layout.astro';\nimport QuoteForm, { QuoteFormData } from '../../components/QuoteForm.astro';\n\n// highlight-start\nimport { quotesApi, gql } from '../../lib/quotes-api';\nimport { isPostRequest, getFormData } from '../../lib/request-utils';\n// highlight-end\n\nconst id = Number(Astro.params.id);\n\nlet formValues: QuoteFormData = {};\nlet loadError = false;\nlet saveError = false;\n\n// highlight-start\nif (isPostRequest(Astro.request)) {\n  const formData = await getFormData(Astro.request);\n  formValues = formData;\n\n  const movieId = await quotesApi.getMovieId(formData.movie);\n\n  if (movieId) {\n    const quote = {\n      id,\n      quote: formData.quote,\n      saidBy: formData.saidBy,\n      movieId,\n    };\n\n    const { error } = await quotesApi.mutation(gql`\n      mutation($quote: QuoteInput!) {\n        saveQuote(input: $quote) {\n          id\n        }\n      }\n    `, { quote });\n\n    if (!error) {\n      return Astro.redirect('/');\n    } else {\n      saveError = true;\n    }\n  } else {\n    saveError = true;\n  }\n} else {\n  const { data } = await quotesApi.query(gql`\n    query($id: ID!) {\n      getQuoteById(id: $id) {\n        id\n        quote\n        saidBy\n        movie {\n          id\n          name\n        }\n      }\n    }\n  `, { id });\n\n  if (data?.getQuoteById) {\n    formValues = {\n      ...data.getQuoteById,\n      movie: data.getQuoteById.movie.name\n    };\n  } else {\n    loadError = true;\n  }\n}\n// highlight-end\n---\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Load up ",(0,a.jsx)(n.a,{href:"http://localhost:3000/edit/1",children:"http://localhost:3000/edit/1"})," in your\nbrowser to test out the edit quote page."]}),"\n",(0,a.jsxs)(n.p,{children:["Now we're going to add edit links to the quotes listing page. Let's start by\ncreating a new component ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/components/QuoteActionEdit.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface Props {\n  id: number;\n}\n\nconst { id } = Astro.props;\n---\n<a href={`/edit/${id}`} class="flex items-center mr-5 text-gray-400 hover:text-yellow-600 underline decoration-yellow-600 decoration-2 underline-offset-4">\n  <svg class="w-6 h-6 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">\n    <path d="M21.731 2.269a2.625 2.625 0 00-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 000-3.712zM19.513 8.199l-3.712-3.712-8.4 8.4a5.25 5.25 0 00-1.32 2.214l-.8 2.685a.75.75 0 00.933.933l2.685-.8a5.25 5.25 0 002.214-1.32l8.4-8.4z" />\n    <path d="M5.25 5.25a3 3 0 00-3 3v10.5a3 3 0 003 3h10.5a3 3 0 003-3V13.5a.75.75 0 00-1.5 0v5.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5V8.25a1.5 1.5 0 011.5-1.5h5.25a.75.75 0 000-1.5H5.25z" />\n  </svg>\n  <span class="hover:underline hover:decoration-yellow-600">Edit</span>\n</a>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's import this component and use it in our listing page,\n",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nimport Layout from \'../layouts/Layout.astro\';\n// highlight-next-line\nimport QuoteActionEdit from \'../components/QuoteActionEdit.astro\';\nimport { quotesApi, gql } from \'../lib/quotes-api\';\n\n// ...\n---\n\n<Layout title="All quotes" page="listing">\n  <main>\n    {quotes.length > 0 ? quotes.map((quote) => (\n      <div class="border-b mb-6">\n        ...\n        <div class="flex flex-col mb-6 text-gray-400">\n// highlight-start\n          <span class="flex items-center">\n            <QuoteActionEdit id={quote.id} />\n          </span>\n          <span class="mt-4 text-gray-400 italic">Added {new Date(Number(quote.createdAt)).toUTCString()}</span>\n// highlight-end\n        </div>\n      </div>\n    )) : (\n      <p>No movie quotes have been added.</p>\n    )}\n  </main>\n</Layout>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"add-delete-quote-functionality",children:"Add delete quote functionality"}),"\n",(0,a.jsx)(n.p,{children:"Our Movie Quotes app can create, retrieve and update quotes. Now we're going\nto implement the D in CRUD \u2014 delete!"}),"\n",(0,a.jsxs)(n.p,{children:["First let's create a new component, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/components/QuoteActionDelete.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface Props {\n  id: number;\n}\n\nconst { id } = Astro.props;\n---\n<form method="POST" action={`/delete/${id}`} class="form-delete-quote m-0">\n  <button type="submit" class="flex items-center text-gray-400 hover:text-red-700 underline decoration-red-700 decoration-2 underline-offset-4">\n    <svg class="w-6 h-6 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">\n      <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm-1.72 6.97a.75.75 0 10-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 101.06 1.06L12 13.06l1.72 1.72a.75.75 0 101.06-1.06L13.06 12l1.72-1.72a.75.75 0 10-1.06-1.06L12 10.94l-1.72-1.72z" clip-rule="evenodd" />\n    </svg>\n    <span>Delete</span>\n  </button>\n</form>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And then we'll drop it into our listing page, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nimport Layout from \'../layouts/Layout.astro\';\nimport QuoteActionEdit from \'../components/QuoteActionEdit.astro\';\n// highlight-next-line\nimport QuoteActionDelete from \'../components/QuoteActionDelete.astro\';\nimport { quotesApi, gql } from \'../lib/quotes-api\';\n\n// ...\n---\n\n<Layout title="All quotes" page="listing">\n  <main>\n    {quotes.length > 0 ? quotes.map((quote) => (\n      <div class="border-b mb-6">\n        ...\n        <div class="flex flex-col mb-6 text-gray-400">\n          <span class="flex items-center">\n            <QuoteActionEdit id={quote.id} />\n// highlight-next-line\n            <QuoteActionDelete id={quote.id} />\n          </span>\n          <span class="mt-4 text-gray-400 italic">Added {new Date(Number(quote.createdAt)).toUTCString()}</span>\n        </div>\n      </div>\n...\n'})}),"\n",(0,a.jsxs)(n.p,{children:["At the moment when a delete form is submitted from our listing page, we get\nan Astro 404 page. Let's fix this by creating a new directory, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/delete/"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src/pages/delete/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And inside of it, let's create a new page, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"[id].astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"---\nimport Layout from '../../layouts/Layout.astro';\n\nimport { quotesApi, gql } from '../../lib/quotes-api';\nimport { isPostRequest } from '../../lib/request-utils';\n\nif (isPostRequest(Astro.request)) {\n  const id = Number(Astro.params.id);\n\n  const { error } = await quotesApi.mutation(gql`\n    mutation($id: ID!) {\n      deleteQuotes(where: { id: { eq: $id }}) {\n        id\n      }\n    }\n  `, { id });\n\n  if (!error) {\n    return Astro.redirect('/');\n  }\n}\n---\n<Layout title=\"Delete movie quote\">\n  <main>\n    <h2>Delete quote</h2>\n    <p class=\"text-lg bg-red-200 p-4\">There was an error deleting the quote. Please try again.</p>\n  </main>\n</Layout>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now if we click on a delete quote button on our listings page, it should call our\nGraphQL API to delete the quote. To make this a little more user friendly, let's\nadd in a confirmation dialog so that users don't delete a quote by accident."}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a new directory, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/scripts/"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src/scripts/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And inside of that directory let's create a new file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"quote-actions.js"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/scripts/quote-actions.js\n\nexport function confirmDeleteQuote (form) {\n  if (confirm('Are you sure want to delete this quote?')) {\n    form.submit()\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then we can pull it in as client side JavaScript on our listing page,\n",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:"<Layout>\n  ...\n</Layout>\n\n<script>\n  import { confirmDeleteQuote } from '../scripts/quote-actions.js'\n\n  addEventListener('DOMContentLoaded', () => {\n    document.querySelectorAll('.form-delete-quote').forEach((deleteForm) => {\n      deleteForm.addEventListener('submit', (event) => {\n        event.preventDefault()\n        confirmDeleteQuote(event.currentTarget)\n      })\n    })\n  })\n<\/script>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"build-a-like-quote-feature",children:'Build a "like" quote feature'}),"\n",(0,a.jsx)(n.p,{children:"We've built all the basic CRUD (Create, Retrieve, Update & Delete) features\ninto our application. Now let's build a feature so that users can interact\nand \"like\" their favourite movie quotes."}),"\n",(0,a.jsx)(n.p,{children:"To build this feature we're going to add custom functionality to our API\nand then add a new component, along with some client side JavaScript, to\nour frontend."}),"\n",(0,a.jsx)(n.h3,{id:"create-an-api-migration",children:"Create an API migration"}),"\n",(0,a.jsxs)(n.p,{children:["We're now going to work on the code for API, under the ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"apps/movie-quotes-api"})}),"\ndirectory."]}),"\n",(0,a.jsxs)(n.p,{children:["First let's create a migration that adds a ",(0,a.jsx)(n.code,{children:"likes"})," column to our ",(0,a.jsx)(n.code,{children:"quotes"}),"\ndatabase table. We'll create a new migration file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"migrations/003.do.sql"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE quotes ADD COLUMN likes INTEGER default 0;\n"})}),"\n",(0,a.jsx)(n.p,{children:"This migration will automatically be applied when we next start our Platformatic\nAPI."}),"\n",(0,a.jsx)(n.h3,{id:"create-an-api-plugin",children:"Create an API plugin"}),"\n",(0,a.jsxs)(n.p,{children:["To add custom functionality to our Platformatic API, we need to create a\n",(0,a.jsx)(n.a,{href:"https://www.fastify.io/docs/latest/Reference/Plugins/",children:"Fastify plugin"})," and\nupdate our API configuration to use it."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a new file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"plugin.js"})}),", and inside it we'll add the skeleton\nstructure for our plugin:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// plugin.js\n\n'use strict'\n\nmodule.exports = async function plugin (app) {\n  app.log.info('plugin loaded')\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now let's register our plugin in our API configuration file, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"platformatic.db.json"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "migrations": {\n    "dir": "./migrations"\n// highlight-start\n  },\n  "plugins": {\n    "paths": ["./plugin.js"]\n  }\n// highlight-end\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"And then we'll start up our Platformatic API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"We should see log messages that tell us that our new migration has been\napplied and our plugin has been loaded:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'[10:09:20.052] INFO (146270): running 003.do.sql\n[10:09:20.129] INFO (146270): plugin loaded\n[10:09:20.209] INFO (146270): server listening\n    url: "http://127.0.0.1:3042"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now it's time to start adding some custom functionality inside our plugin."}),"\n",(0,a.jsx)(n.h3,{id:"add-a-rest-api-route",children:"Add a REST API route"}),"\n",(0,a.jsxs)(n.p,{children:["We're going to add a REST route to our API that increments the count of\nlikes for a specific quote: ",(0,a.jsx)(n.code,{children:"/quotes/:id/like"})]}),"\n",(0,a.jsxs)(n.p,{children:["First let's add ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/fluent-json-schema",children:"fluent-json-schema"})," as a dependency for our API:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install fluent-json-schema\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We'll use ",(0,a.jsx)(n.code,{children:"fluent-json-schema"})," to help us generate a JSON Schema. We can then\nuse this schema to validate the request path parameters for our route (",(0,a.jsx)(n.code,{children:"id"}),")."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.a,{href:"https://github.com/fastify/fastify-type-provider-typebox",children:"fastify-type-provider-typebox"})," or ",(0,a.jsx)(n.a,{href:"https://github.com/sinclairzx81/typebox",children:"typebox"})," if you want to convert your JSON Schema into a Typescript type. See ",(0,a.jsx)(n.a,{href:"https://github.com/fastify/fluent-json-schema/issues/78#issuecomment-669059113",children:"this GitHub thread"})," to have a better overview about it. Look at the example below to have a better overview."]})}),"\n",(0,a.jsxs)(n.p,{children:["Here you can see in practice of to leverage ",(0,a.jsx)(n.code,{children:"typebox"})," combined with ",(0,a.jsx)(n.code,{children:"fastify-type-provider-typebox"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { FastifyInstance } from "fastify";\nimport { Static, Type } from "@sinclair/typebox";\nimport { TypeBoxTypeProvider } from "@fastify/type-provider-typebox";\n\n/**\n * Creation of the JSON schema needed to validate the params passed to the route\n */\nconst schemaParams = Type.Object({\n  num1: Type.Number(),\n  num2: Type.Number(),\n});\n\n/**\n * We convert the JSON schema to the TypeScript type, in this case:\n * {\n    num1: number;\n    num2: number;\n  }\n */\ntype Params = Static<typeof schemaParams>;\n\n/**\n * Here we can pass the type previously created to our syncronous unit function\n */\nconst multiplication = ({ num1, num2 }: Params) => num1 * num2;\n\nexport default async function (app: FastifyInstance) {\n  app.withTypeProvider<TypeBoxTypeProvider>().get(\n    "/multiplication/:num1/:num2",\n    { schema: { params: schemaParams } },\n    /**\n     * Since we leverage `withTypeProvider<TypeBoxTypeProvider>()`,\n     * we no longer need to explicitly define the `params`.\n     * The will be automatically inferred as:\n     *  {\n          num1: number;\n          num2: number;\n        }\n     */\n    ({ params }) => multiplication(params)\n  );\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now let's add our REST API route in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"plugin.js"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use strict'\n\n// highlight-next-line\nconst S = require('fluent-json-schema')\n\nmodule.exports = async function plugin (app) {\n  app.log.info('plugin loaded')\n\n  // This JSON Schema will validate the request path parameters.\n  // It reuses part of the schema that Platormatic DB has\n  // automatically generated for our Quote entity.\n// highlight-start\n  const schema = {\n    params: S.object().prop('id', app.getSchema('Quote').properties.id)\n  }\n\n  app.post('/quotes/:id/like', { schema }, async function (request, response) {\n    return {}\n  })\n// highlight-end\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can now make a ",(0,a.jsx)(n.code,{children:"POST"})," request to our new API route:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl --request POST http://localhost:3042/quotes/1/like\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Learn more about how validation works in the\n",(0,a.jsx)(n.a,{href:"https://www.fastify.io/docs/latest/Reference/Validation-and-Serialization/",children:"Fastify validation documentation"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["Our API route is currently returning an empty object (",(0,a.jsx)(n.code,{children:"{}"}),"). Let's wire things\nup so that it increments the number of likes for the quote with the specified ID.\nTo do this we'll add a new function inside of our plugin:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"module.exports = async function plugin (app) {\n  app.log.info('plugin loaded')\n\n// highlight-start\n  async function incrementQuoteLikes (id) {\n    const { db, sql } = app.platformatic\n\n    const result = await db.query(sql`\n      UPDATE quotes SET likes = likes + 1 WHERE id=${id} RETURNING likes\n    `)\n\n    return result[0]?.likes\n  }\n// highlight-end\n\n  // ...\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"And then we'll call that function in our route handler function:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"app.post('/quotes/:id/like', { schema }, async function (request, response) {\n// highlight-next-line\n  return { likes: await incrementQuoteLikes(request.params.id) }\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now when we make a ",(0,a.jsx)(n.code,{children:"POST"})," request to our API route:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl --request POST http://localhost:3042/quotes/1/like\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We should see that the ",(0,a.jsx)(n.code,{children:"likes"})," value for the quote is incremented every time\nwe make a request to the route."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{"likes":1}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"add-a-graphql-api-mutation",children:"Add a GraphQL API mutation"}),"\n",(0,a.jsxs)(n.p,{children:["We can add a ",(0,a.jsx)(n.code,{children:"likeQuote"})," mutation to our GraphQL API by reusing the\n",(0,a.jsx)(n.code,{children:"incrementQuoteLikes"})," function that we just created."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's add this code at the end of our plugin, inside ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"plugin.js"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"module.exports = async function plugin (app) {\n  // ...\n\n// highlight-start\n  app.graphql.extendSchema(`\n    extend type Mutation {\n      likeQuote(id: ID!): Int\n    }\n  `)\n\n  app.graphql.defineResolvers({\n    Mutation: {\n      likeQuote: async (_, { id }) => await incrementQuoteLikes(id)\n    }\n  })\n// highlight-end\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The code we've just added extends our API's GraphQL schema and defines\na corresponding resolver for the ",(0,a.jsx)(n.code,{children:"likeQuote"})," mutation."]}),"\n",(0,a.jsxs)(n.p,{children:["We can now load up GraphiQL in our web browser and try out our new ",(0,a.jsx)(n.code,{children:"likeQuote"}),"\nmutation with this GraphQL query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"mutation {\n  likeQuote(id: 1)\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Learn more about how to extend the GraphQL schema and define resolvers in the\n",(0,a.jsx)(n.a,{href:"https://mercurius.dev/#/docs/api/options",children:"Mercurius API documentation"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"enable-cors-on-the-api",children:"Enable CORS on the API"}),"\n",(0,a.jsx)(n.p,{children:'When we build "like" functionality into our frontend, we\'ll be making a client\nside HTTP request to our GraphQL API. Our backend API and our frontend are running\non different origins, so we need to configure our API to allow requests from\nthe frontend. This is known as Cross-Origin Resource Sharing (CORS).'}),"\n",(0,a.jsxs)(n.p,{children:["To enable CORS on our API, let's open up our API's ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:".env"})})," file and add in\na new setting:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"PLT_SERVER_CORS_ORIGIN=http://localhost:3000\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The value of ",(0,a.jsx)(n.code,{children:"PLT_SERVER_CORS_ORIGIN"})," is our frontend application's origin."]}),"\n",(0,a.jsxs)(n.p,{children:["Now we can add a ",(0,a.jsx)(n.code,{children:"cors"})," configuration object in our API's configuration file,\n",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"platformatic.db.json"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "server": {\n    "logger": {\n      "level": "{PLT_SERVER_LOGGER_LEVEL}"\n    },\n    "hostname": "{PLT_SERVER_HOSTNAME}",\n    "port": "{PORT}",\n// highlight-start\n    "cors": {\n      "origin": "{PLT_SERVER_CORS_ORIGIN}"\n    }\n// highlight-end\n  },\n  ...\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The HTTP responses from all endpoints on our API will now include the header:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"access-control-allow-origin: http://localhost:3000\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will allow JavaScript running on web pages under the ",(0,a.jsx)(n.code,{children:"http://localhost:3000"}),"\norigin to make requests to our API."]}),"\n",(0,a.jsx)(n.h3,{id:"add-like-quote-functionality",children:"Add like quote functionality"}),"\n",(0,a.jsx)(n.p,{children:'Now that our API supports "liking" a quote, let\'s integrate it as a feature in\nour frontend.'}),"\n",(0,a.jsxs)(n.p,{children:["First we'll create a new component, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/components/QuoteActionLike.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nexport interface Props {\n  id: number;\n  likes: number;\n}\n\nconst { id, likes } = Astro.props;\n---\n<span data-quote-id={id} class="like-quote cursor-pointer mr-5 flex items-center">\n  <svg class="like-icon w-6 h-6 mr-2 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">\n    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" />\n  </svg>\n  <span class="likes-count w-8">{likes}</span>\n</span>\n\n<style>\n  .like-quote:hover .like-icon,\n  .like-quote.liked .like-icon {\n    fill: currentColor;\n  }\n</style>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And in our listing page, ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),", let's import our new\ncomponent and add it into the interface:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\nimport Layout from \'../layouts/Layout.astro\';\nimport QuoteActionEdit from \'../components/QuoteActionEdit.astro\';\nimport QuoteActionDelete from \'../components/QuoteActionDelete.astro\';\n// highlight-next-line\nimport QuoteActionLike from \'../components/QuoteActionLike.astro\';\nimport { quotesApi, gql } from \'../lib/quotes-api\';\n\n// ...\n---\n\n<Layout title="All quotes" page="listing">\n  <main>\n    {quotes.length > 0 ? quotes.map((quote) => (\n      <div class="border-b mb-6">\n        ...\n        <div class="flex flex-col mb-6 text-gray-400">\n          <span class="flex items-center">\n// highlight-next-line\n            <QuoteActionLike id={quote.id} likes={quote.likes} />\n            <QuoteActionEdit id={quote.id} />\n            <QuoteActionDelete id={quote.id} />\n          </span>\n          <span class="mt-4 text-gray-400 italic">Added {new Date(Number(quote.createdAt)).toUTCString()}</span>\n        </div>\n      </div>\n...\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's update the GraphQL query in this component's script to retrieve the\n",(0,a.jsx)(n.code,{children:"likes"})," field for all quotes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data } = await quotesApi.query(gql`\n  query {\n    quotes {\n      id\n      quote\n      saidBy\n// highlight-next-line\n      likes\n      createdAt\n      movie {\n        id\n        name\n      }\n    }\n  }\n`);\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now we have the likes showing for each quote, let's wire things up so that\nclicking on the like component for a quote will call our API and add a like."}),"\n",(0,a.jsxs)(n.p,{children:["Let's open up ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/scripts/quote-actions.js"})})," and add a new function that\nmakes a request to our GraphQL API:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// highlight-next-line\nimport { quotesApi, gql } from '../lib/quotes-api.js'\n\nexport function confirmDeleteQuote (form) {\n  if (confirm('Are you sure want to delete this quote?')) {\n    form.submit()\n  }\n}\n\n// highlight-start\nexport async function likeQuote (likeQuote) {\n  likeQuote.classList.add('liked')\n  likeQuote.classList.remove('cursor-pointer')\n\n  const id = Number(likeQuote.dataset.quoteId)\n\n  const { data } = await quotesApi.mutation(gql`\n    mutation($id: ID!) {\n      likeQuote(id: $id)\n    }\n  `, { id })\n\n  if (data?.likeQuote) {\n    likeQuote.querySelector('.likes-count').innerText = data.likeQuote\n  }\n}\n// highlight-end\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then let's attach the ",(0,a.jsx)(n.code,{children:"likeQuote"})," function to the click event for each\nlike quote component on our listing page. We can do this by adding a little\nextra code inside the ",(0,a.jsx)(n.code,{children:"<script>"})," block in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"<script>\n// highlight-next-line\n  import { confirmDeleteQuote, likeQuote } from '../scripts/quote-actions.js'\n\n  addEventListener('DOMContentLoaded', () => {\n    document.querySelectorAll('.form-delete-quote').forEach((deleteForm) => {\n      deleteForm.addEventListener('submit', (event) => {\n        event.preventDefault()\n        confirmDeleteQuote(event.currentTarget)\n      })\n    })\n\n// highlight-start\n    document.querySelectorAll('.like-quote').forEach((container) => {\n      container.addEventListener('click', (event) => likeQuote(event.currentTarget), { once: true })\n    })\n// highlight-end\n  })\n<\/script>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sort-the-listing-by-top-quotes",children:"Sort the listing by top quotes"}),"\n",(0,a.jsx)(n.p,{children:"Now that users can like their favourite quotes, as a final step, we'll allow\nfor sorting quotes on the listing page by the number of likes they have."}),"\n",(0,a.jsxs)(n.p,{children:["Let's update ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/pages/index.astro"})})," to read a ",(0,a.jsx)(n.code,{children:"sort"})," query string parameter\nand use it the GraphQL query that we make to our API:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'---\n// ...\n\n// highlight-start\nconst allowedSortFields = ["createdAt", "likes"];\nconst searchParamSort = new URL(Astro.request.url).searchParams.get("sort");\nconst sort = allowedSortFields.includes(searchParamSort) ? searchParamSort : "createdAt";\n// highlight-end\n\nconst { data } = await quotesApi.query(gql`\n  query {\n// highlight-next-line\n    quotes(orderBy: {field: ${sort}, direction: DESC}) {\n      id\n      quote\n      saidBy\n      likes\n      createdAt\n      movie {\n        id\n        name\n      }\n    }\n  }\n`);\n\nconst quotes = data?.quotes || [];\n---\n// highlight-next-line\n<Layout title="All quotes" page={`listing-${sort}`}>\n...\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then let's replace the 'All quotes' link in the ",(0,a.jsx)(n.code,{children:"<nav>"})," in ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"src/layouts/Layout.astro"})}),"\nwith two new links:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-astro",children:'<nav class="prose mx-auto mb-6 border-y border-gray-200 flex">\n// highlight-start\n  <a href="/?sort=createdAt" class={`p-3 ${page === "listing-createdAt" && navActiveClasses}`}>Latest quotes</a>\n  <a href="/?sort=likes" class={`p-3 ${page === "listing-likes" && navActiveClasses}`}>Top quotes</a>\n// highlight-end\n  <a href="/add" class={`p-3 ${page === "add" && navActiveClasses}`}>Add a quote</a>\n</nav>\n'})}),"\n",(0,a.jsx)(n.p,{children:"With these few extra lines of code, our users can now sort quotes by when they\nwere created or by the number of likes that they have. Neat!"}),"\n",(0,a.jsx)(n.h2,{id:"wrapping-up",children:"Wrapping up"}),"\n",(0,a.jsx)(n.p,{children:"And we're done \u2014 you now have the knowledge you need to build a full stack\napplication on top of Platformatic DB."}),"\n",(0,a.jsx)(n.p,{children:"We can't wait to see what you'll build next!"})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},5840:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=t(85893),r=t(11151),o=t(74866),i=t(85162);const s={},l=void 0,d={id:"getting-started/new-api-project-instructions",title:"new-api-project-instructions",description:"Run this command in your terminal to start the Platformatic creator wizard:",source:"@site/versioned_docs/version-1.23.0/getting-started/new-api-project-instructions.md",sourceDirName:"getting-started",slug:"/getting-started/new-api-project-instructions",permalink:"/docs/getting-started/new-api-project-instructions",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.23.0/getting-started/new-api-project-instructions.md",tags:[],version:"1.23.0",frontMatter:{}},c={},u=[];function h(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Run this command in your terminal to start the Platformatic creator wizard:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager-create",children:[(0,a.jsx)(i.Z,{value:"npm",label:"npm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm create platformatic@latest\n"})})}),(0,a.jsx)(i.Z,{value:"yarn",label:"yarn",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yarn create platformatic\n"})})}),(0,a.jsx)(i.Z,{value:"pnpm",label:"pnpm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm create platformatic@latest\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"This interactive command-line tool will ask you some questions about how you'd\nlike to set up your new Platformatic project. For this guide, select these options:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"- Which kind of project do you want to create?  => DB\n- Where would you like to create your project?  => quick-start\n- Do you want to create default migrations?     => Yes\n- Do you want to create a plugin?               => Yes\n- Do you want to use TypeScript?                => No\n- Do you want to install dependencies?          => Yes (this can take a while)\n- Do you want to apply the migrations?          => Yes\n- Do you want to generate types?                => Yes\n- Do you want to create the github action to deploy this application to Platformatic Cloud dynamic workspace? => No\n- Do you want to create the github action to deploy this application to Platformatic Cloud static workspace?  => No\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Once the wizard is complete, you'll have a Platformatic app project in the\nfolder ",(0,a.jsx)(n.code,{children:"quick-start"}),", with example migration files and a plugin script."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Make sure you run the npm/yarn/pnpm command ",(0,a.jsx)(n.code,{children:"install"})," command manually if you\ndon't ask the wizard to do it for you."]})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>i});t(67294);var a=t(36905);const r={tabItem:"tabItem_Ymn6"};var o=t(85893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,i),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(67294),r=t(36905),o=t(12466),i=t(16550),s=t(20469),l=t(91980),d=t(67392),c=t(50012);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=h(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[d,u]=m({queryString:t,groupId:r}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),j=(()=>{const e=d??g;return p({value:e,tabValues:o})?e:null})();(0,s.Z)((()=>{j&&l(j)}),[j]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)}),[u,x,o]),tabValues:o}}var x=t(72389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(85893);function v(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==a&&(d(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...o,className:(0,r.Z)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function q(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,r.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...e,...n}),(0,f.jsx)(y,{...e,...n})]})}function w(e){const n=(0,x.Z)();return(0,f.jsx)(q,{...e,children:u(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(67294);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);