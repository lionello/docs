"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[22484],{4565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var s=n(85893),r=n(11151);const i={},a="Schema support",o={id:"reference/db/schema-support",title:"Schema support",description:"It's possible to specify the schemas where the tables are located (if the database supports schemas).",source:"@site/docs/reference/db/schema-support.md",sourceDirName:"reference/db",slug:"/reference/db/schema-support",permalink:"/docs/next/reference/db/schema-support",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/platformatic/edit/main/docs/reference/db/schema-support.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Programmatic API",permalink:"/docs/next/reference/db/programmatic"},next:{title:"Platformatic Runtime",permalink:"/docs/next/reference/runtime/introduction"}},c={},h=[];function d(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"schema-support",children:"Schema support"}),"\n",(0,s.jsx)(t.p,{children:"It's possible to specify the schemas where the tables are located (if the database supports schemas).\nPlatformaticDB will inspect this schemas to create the entities"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Example"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'CREATE SCHEMA IF NOT EXISTS "test1";\nCREATE TABLE IF NOT EXISTS test1.movies (\n  id INTEGER PRIMARY KEY,\n  title TEXT NOT NULL\n);\n\nCREATE SCHEMA IF NOT EXISTS "test2";\nCREATE TABLE IF NOT EXISTS test2.users (\n  id INTEGER PRIMARY KEY,\n  title TEXT NOT NULL\n);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The schemas must be specified in configuration in the ",(0,s.jsx)(t.code,{children:"schema"})," section.\nNote that if we use schemas and migrations, we must specify the schema in the migrations table as well\n(with postgresql, we assume we use the default ",(0,s.jsx)(t.code,{children:"public"})," schema)."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'  ...\n  "db": {\n    "connectionString": "(...)",\n    "schema": [\n      "test1", "test2"\n    ],\n    "ignore": {\n      "versions": true\n    }\n  },\n  "migrations": {\n    "dir": "migrations",\n    "table": "test1.versions"\n  },\n\n  ...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The entity names are then generated in the form ",(0,s.jsx)(t.code,{children:"schemaName + entityName"}),", PascalCase (this is necessary to avoid name collisions in case there are tables with same name in different schemas).\nSo for instance for the example above we generate the ",(0,s.jsx)(t.code,{children:"Test1Movie"})," and ",(0,s.jsx)(t.code,{children:"Test2User"})," entities."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"Please pay attention to the entity names when using schema, these are also used to setup authorization rules"})})})})]})}function m(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var s=n(67294);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);