"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[61077],{67305:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=s(85893),i=s(11151);const r={},a="Schema support",o={id:"reference/db/schema-support",title:"Schema support",description:"It's possible to specify the schemas where the tables are located (if the database supports schemas).",source:"@site/versioned_docs/version-1.21.1/reference/db/schema-support.md",sourceDirName:"reference/db",slug:"/reference/db/schema-support",permalink:"/docs/1.21.1/reference/db/schema-support",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.21.1/reference/db/schema-support.md",tags:[],version:"1.21.1",frontMatter:{},sidebar:"docs",previous:{title:"Programmatic API",permalink:"/docs/1.21.1/reference/db/programmatic"},next:{title:"Platformatic Runtime",permalink:"/docs/1.21.1/reference/runtime/introduction"}},c={},d=[];function h(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"schema-support",children:"Schema support"}),"\n",(0,n.jsx)(t.p,{children:"It's possible to specify the schemas where the tables are located (if the database supports schemas).\nPlatformaticDB will inspect this schemas to create the entities"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Example"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:'CREATE SCHEMA IF NOT EXISTS "test1";\nCREATE TABLE IF NOT EXISTS test1.movies (\n  id INTEGER PRIMARY KEY,\n  title TEXT NOT NULL\n);\n\nCREATE SCHEMA IF NOT EXISTS "test2";\nCREATE TABLE IF NOT EXISTS test2.users (\n  id INTEGER PRIMARY KEY,\n  title TEXT NOT NULL\n);\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The schemas must be specified in configuration in the ",(0,n.jsx)(t.code,{children:"schema"})," section.\nNote that if we use schemas and migrations, we must specify the schema in the migrations table as well\n(with postgresql, we assume we use the default ",(0,n.jsx)(t.code,{children:"public"})," schema)."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'  ...\n  "db": {\n    "connectionString": "(...)",\n    "schema": [\n      "test1", "test2"\n    ],\n    "ignore": {\n      "versions": true\n    }\n  },\n  "migrations": {\n    "dir": "migrations",\n    "table": "test1.versions"\n  },\n\n  ...\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The entities name are then generated in the form ",(0,n.jsx)(t.code,{children:"schemaName + entityName"}),", PascalCase (this is necessary to avoid name collisions in case there are tables with same name in different schemas).\nSo for instance for the example above we generate the ",(0,n.jsx)(t.code,{children:"Test1Movie"})," and ",(0,n.jsx)(t.code,{children:"Test2User"})," entities."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:(0,n.jsx)(t.strong,{children:"Please pay attention to the entity names when using schema, these are also used to setup authorization rules"})})})})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>a});var n=s(67294);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);